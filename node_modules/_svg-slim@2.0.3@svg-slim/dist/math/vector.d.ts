export declare class Vector {
    constructor(x?: number, y?: number);
    x: number;
    y: number;
    private get _modulo();
    get modulo(): number;
    set modulo(m: number);
    rotate(arc: number): this;
    valueOf(): number;
    toString(): string;
    normalize(): this;
    zero(): this;
    add(v: Vector): this;
    substract(v: Vector): this;
    multiplied(n: Vector): number;
    multiplied(n: number): Vector;
    radian(v: Vector): number;
    angel(v: Vector): number;
    get isZero(): boolean;
    get isNormalize(): boolean;
    static add(v1: Vector, v2: Vector): Vector;
    static substract(v1: Vector, v2: Vector): Vector;
    static multiplied(v1: Vector, v2: Vector): number;
    static multiplied(v1: Vector, n: number): Vector;
    static radian(v1: Vector, v2: Vector): number;
    static angel(v1: Vector, v2: Vector): number;
    static projected(v1: Vector, v2: Vector): Vector;
    static plumb(v1: Vector, v2: Vector): Vector;
    static Rounding(n: number): number;
    static distance(v1: Vector, v2: Vector): number;
}
