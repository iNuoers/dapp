import { Node } from '.';
import { INode, IParentNode, IParentNodeOption, ITextNode, TSelector, ITagNode } from '../../typings/node';
export declare class ParentNode extends Node implements IParentNode {
    constructor(option: IParentNodeOption);
    nodeType: IParentNode['nodeType'];
    childNodes: IParentNode['childNodes'];
    get children(): ITagNode[];
    /**
     * 复制自身，但是不复制节点树关系链
     */
    cloneNode(): ParentNode;
    /**
     * 追加子节点
     * @param childNode 要追加的节点
     */
    appendChild(childNode: INode | INode[]): boolean;
    /**
     * 插入到子节点之前
     * @param childNode 要插入的节点
     * @param previousTarget 插入到哪个子字节之前
     */
    insertBefore(childNode: INode | INode[], previousTarget: INode): boolean;
    /**
     * 替换子节点
     * @param newChild 新的子节点
     * @param oldChild 要替换的旧节点
     */
    replaceChild(newChild: INode | INode[], oldChild: INode): INode | null;
    /**
     * 移除子节点
     * @param childNode 要移除的子节点
     */
    removeChild(childNode: INode | INode[]): boolean;
    querySelector(selector: TSelector): IParentNode | ITextNode | null;
    querySelectorAll(selector: TSelector): Array<IParentNode | ITextNode>;
}
