export default {
  props: {
    clickGen: {
      type: Boolean,
      required: false,
      default: true
    },
    autoGenTime: {
      type: Number,
      required: false,
      default: 0
    },
    byRequirement: {
      type: Boolean,
      required: false,
      default: false
    },
    snapped: {
      type: Boolean,
      required: false,
      default: false
    },
    overlayer: {
      type: String,
      required: false,
      default: "n0"
    },
    overlayerColor: {
      type: String,
      required: false,
      default: ""
    },
    elId: {
      type: String,
      required: false,
      default: "xnioejdapwoo382efjijoisasa"
    }
  },
  data() {
    return { w: 0, h: 0, snapElement: false }
  },
  mounted() {
    this.$nextTick(() => {
      if (this.snapped && window) {
        window.addEventListener("resize", this.resizeWindow)
      }
    })
  },
  beforeDestroy() {
    if (window) {
      window.removeEventListener("resize", this.resizeWindow)
    }
  },
  methods: {
    setRefsParentDimension(elements_ref) {
      this.w = elements_ref.parentElement.clientWidth
      this.h = elements_ref.parentElement.clientHeight
    },
    resizeWindow() {
      if (this.snapElement) {
        this.setRefsParentDimension(this.snapElement)
      }
    },
    updateRenderSize(ele) {
      if (this.snapped) {
        this.snapElement = ele
        if (ele) {
          this.setRefsParentDimension(ele)
        }
      } else {
        this.w = window.innerWidth
        this.h = window.innerHeight
      }
    }
  }
}
