(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{705:function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return f}));var r=n(890),o=n(738),c=n(615),h=n.n(c),m=n(1092),d=n.n(m),l=n(283),y=n.n(l),w=n(140);class f{constructor(t,e){this.debug=!1,this.accounts=[],this.gas=1e6,this.gasPrice=21e9,this.ethereumCore=e,this.w3=t,this.tokens={},this.contracts={}}setDebug(t){this.debug=t}isInstalled(){return this.ethereumCore.isConnected()}isLoggedIn(){return this.ethereumCore&&this.ethereumCore.isConnected()}isAddress(t){return this.w3.utils.isAddress(t)}w3Utils(){return this.w3.utils}async isUnlocked(){return await this.ethereumCore._metamask.isUnlocked()}getAccountAddress(){return this.accounts[0]}setAccounts(data){this.debug&&console.log("set account now",data),this.accounts=w.map(data,(t=>this.w3.utils.toChecksumAddress(t)))}setResource(t,e){this.gas=t,this.gasPrice=e,this.debug,this._setOtherRrc(t,e)}_setOtherRrc(t,e){for(let b in this.contracts)this.contracts[b].setResource(t,e)}haveAccounts(){return this.accounts.length>0}NewContractFallback(t=[],address=""){const e=this.w3.eth.Contract;return e.setProvider(this.ethereumCore),new e(t,address,{from:this.accounts[0],gasPrice:String(this.gasPrice)})}async sendCoin(t,e){const n={value:t,to:e,gas:this.gas,gasPrice:this.gasPrice,from:this.accounts[0]};await this.w3.eth.sendTransaction(n).on("confirmation",this.confirmHandler).catch(this.errorHandler)}async sendToken(t,e,n){const r=await this.NewToken(n),o=new y.a(t);await r.transfer(e,o)}async approveToken(t,e,n){const r=await this.NewToken(t),o=this.w3.utils.toBN(n);await r.approve(e,o)}async approveTokenUnlimited(t,e){const n=await this.NewToken(t);const r=this.w3.utils.toBN("1000000000000000000000000");console.log(r);let o=r;await n.approve(e,o)}async getMyTokenBalance(t){return await this.getTokenBalanceWei(this.getAccountAddress(),t)}keccak256(data){return this.w3.utils.keccak256(data)}sha(data){return this.w3.utils.soliditySha3(data)}async balance(){return await this.w3.eth.getBalance(this.getAccountAddress())}async getCoinPlatform(){return await this.w3.eth.getBalance(this.getAccountAddress())}async getMyCoinDetail(t){return await this.getCoinDetail(t,this.getAccountAddress())}async coinExample(){return await this.getMyCoinDetail("TXHvwxYbqsDqTCQ9KxNFj4SkuXy7EF2AHR")}async initCoinDetail(t,e){const n=await this.NewToken(t),a=await n.balanceOf(e),r=await n.decimals(),s=await n.symbol(),c=await n.name(),h=new o.a(t,r,s,c);return h.setHolder(e,a),this.tokens[t]=h,this.contracts[t]=n,h}async getCoinDetail(t,address){if(!this.isLoggedIn())throw"wallet is not login";if(this.tokens.hasOwnProperty(t)){let e=this.contracts[t];e||(e=await this.NewToken(t),this.contracts[t]=e);const b=await e.balanceOf(address);this.tokens[t].setHolder(address,b)}else await this.initCoinDetail(t,address);return this.tokens[t]}async getContractToken(t){let e=this.contracts[t];return e||(this.debug&&console.log("new contract token ..."),e=await this.NewToken(t),this.contracts[t]=e),e}async getTokenBalanceWei(address,t){if(this.tokens.hasOwnProperty(t)){let e=this.contracts[t];const b=await e.balanceOf(address);return this.tokens[t].setHolder(address,b),b.toNumber()}return(await this.getCoinDetail(t,address)).amountCode(address)}async NewToken(t){const e=await r.a.init(t,this.ethereumCore,this.w3);return e.setResource(this.gas,this.gasPrice),e.setBlockLink(this),e}getListedCoins(){return this.tokens}explainTrc20(t){const e=this.getAccountAddress();return t.holder[e]}eventListener(t,e){}setHandlers(t,e,n){this.errorHandler=n,this.boardcastHandler=e,this.confirmHandler=t}metamask_decrypt(t,e,n){this.ethereumCore&&this.ethereumCore.request({method:"eth_decrypt",params:[t,e]}).then((t=>{this.debug&&console.log("The decrypted message is:",t),n(t)})).catch(this.errorHandler)}metamask_message_sign(e,n){return h.a.bufferToHex(t.from(JSON.stringify(d.a.encrypt(e,{data:n},"x25519-xsalsa20-poly1305")),"utf8"))}metamask_add_token(t){this.ethereumCore.request({method:"wallet_watchAsset",params:t}).then((t=>{if(!t)throw new Error("Something went wrong.");this.debug&&console.log("FOO successfully added to wallet!")})).catch(this.errorHandler)}metamask_add_chain(t){this.ethereumCore.request({method:"wallet_addEthereumChain",params:t}).then((t=>{if(!t)throw new Error("Something went wrong.");this.debug&&console.log("Chain is successfully added to wallet!")})).catch(this.errorHandler)}}}).call(this,n(609).Buffer)},738:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r=n(728),o=n(283),c=n.n(o);class h{constructor(address,t,e,n){this.address=address,t instanceof r.BigNumber?this.decimal=t.toNumber():this.decimal=t,this.tokenName=n,this.tokenSymbol=e,this.unlimited={},this.holder={},this.spender={}}setHolder(address,t){let e=0;e=t instanceof r.BigNumber?t.toNumber():t,this.holder.hasOwnProperty(address),this.holder[address]=e}async runAllowanceAmount(t,e,n){let g=await t.allowance(e,n),o=0;o=g instanceof r.BigNumber||g instanceof c.a?g.toNumber():g,o>=1e36?this.setSpenderExtreme(e,n,!0):this.setSpenderNormal(e,n,o)}setSpenderExtreme(t,e,n){return this._setDeep(this.unlimited,[t,e],n)}setSpenderNormal(t,e,n){return this._setDeep(this.spender,[t,e],n)}name(){return this.tokenName}symbol(){return this.tokenSymbol}amountCode(address){return this.holder[address]}balance(address){return this.amountCode(address)}byFloat(address){return this.holder[address]/this.decimal}showAllowance(t,e){return this.spender.hasOwnProperty(t)&&this.spender[t].hasOwnProperty(e)?this.spender[t][e]:0}showAllowed(t,e){return!(!this.unlimited.hasOwnProperty(t)||!this.unlimited[t].hasOwnProperty(e))&&this.unlimited[t][e]}approvalStatus(t,e){return{approvedAmount:this.showAllowance(t,e),isUnlimited:this.showAllowed(t,e)}}_setDeep(t,path,e,n=!1){let r=Array.isArray(path)?path:path.split(".");return r.length>1?(t.hasOwnProperty(r[0])&&"object"==typeof t[r[0]]||(t[r[0]]={}),this._setDeep(t[r[0]],r.slice(1),e)):(t[r[0]]=e,!0)}}},836:function(t,e,n){"use strict"},890:function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var r,o=n(674),c=n(737);!function(t){t.Approval="Approval",t.MinterAdded="MinterAdded",t.MinterRemoved="MinterRemoved",t.Transfer="Transfer"}(r||(r={}));class h extends c.a{constructor(address,t,e){super("Ori20",h.ABI(),address,t,e),this._methodABIIndex={}}static Instance(){if(window&&window.hasOwnProperty("__eth_contract_Ori20")){const t=window.__eth_contract_Ori20;return t}return!1}static async init(t,e,n){const r=await new h(t,e,n);return r.constructorArgs=[],window&&!window.hasOwnProperty("__eth_contract_Ori20")&&(window.__eth_contract_Ori20=r),r}static ABI(){return[{inputs:[],outputs:[],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{name:"owner",type:"address",indexed:!0},{name:"spender",type:"address",indexed:!0},{name:"value",type:"uint256",indexed:!1}],name:"Approval",outputs:[],type:"event"},{anonymous:!1,inputs:[{name:"account",type:"address",indexed:!0}],name:"MinterAdded",outputs:[],type:"event"},{anonymous:!1,inputs:[{name:"account",type:"address",indexed:!0}],name:"MinterRemoved",outputs:[],type:"event"},{anonymous:!1,inputs:[{name:"from",type:"address",indexed:!0},{name:"to",type:"address",indexed:!0},{name:"value",type:"uint256",indexed:!1}],name:"Transfer",outputs:[],type:"event"},{constant:!1,inputs:[{name:"account",type:"address"}],name:"addMinter",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"spender",type:"address"},{name:"amount",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"account",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"amount",type:"uint256"}],name:"burn",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"account",type:"address"},{name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"cap",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"spender",type:"address"},{name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"getDecimals",outputs:[{name:"",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"gov",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"spender",type:"address"},{name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"account",type:"address"}],name:"isMinter",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"account",type:"address"},{name:"amount",type:"uint256"}],name:"mint",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"account",type:"address"}],name:"removeMinter",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[],name:"renounceMinter",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"tokenName",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"tokenSymbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"sender",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"}]}async addMinter(t){o.a.isString("account",t);const e=this._contract.methods.addMinter(t);return await e.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async addMinterGas(t){return await this._contract.methods.addMinter(t).estimateGas()}async allowance(t,e){o.a.isString("owner",t),o.a.isString("spender",e);const n=this._contract.methods.allowance(t,e);return await n.call()}async allowanceGas(t,e){return await this._contract.methods.allowance(t,e).estimateGas()}async approve(t,e){o.a.isString("spender",t),o.a.isNumberOrBigNumber("amount",e);const n=this._contract.methods.approve(t,e);await n.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async approveGas(t,e){return await this._contract.methods.approve(t,e).estimateGas()}async balanceOf(t){o.a.isString("account",t);const e=this._contract.methods.balanceOf(t);return await e.call()}async balanceOfGas(t){return await this._contract.methods.balanceOf(t).estimateGas()}async burn(t){o.a.isNumberOrBigNumber("amount",t);const e=this._contract.methods.burn(t);return await e.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async burnGas(t){return await this._contract.methods.burn(t).estimateGas()}async burnFrom(t,e){o.a.isString("account",t),o.a.isNumberOrBigNumber("amount",e);const n=this._contract.methods.burnFrom(t,e);return await n.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async burnFromGas(t,e){return await this._contract.methods.burnFrom(t,e).estimateGas()}async cap(){const t=this._contract.methods.cap();return await t.call()}async capGas(){return await this._contract.methods.cap().estimateGas()}async decimals(){const t=this._contract.methods.decimals();return await t.call()}async decimalsGas(){return await this._contract.methods.decimals().estimateGas()}async decreaseAllowance(t,e){o.a.isString("spender",t),o.a.isNumberOrBigNumber("subtractedValue",e);const n=this._contract.methods.decreaseAllowance(t,e);return await n.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async decreaseAllowanceGas(t,e){return await this._contract.methods.decreaseAllowance(t,e).estimateGas()}async getDecimals(){const t=this._contract.methods.getDecimals();return await t.call()}async getDecimalsGas(){return await this._contract.methods.getDecimals().estimateGas()}async gov(){const t=this._contract.methods.gov();return await t.call()}async govGas(){return await this._contract.methods.gov().estimateGas()}async increaseAllowance(t,e){o.a.isString("spender",t),o.a.isNumberOrBigNumber("addedValue",e);const n=this._contract.methods.increaseAllowance(t,e);return await n.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async increaseAllowanceGas(t,e){return await this._contract.methods.increaseAllowance(t,e).estimateGas()}async isMinter(t){o.a.isString("account",t);const e=this._contract.methods.isMinter(t);return await e.call()}async isMinterGas(t){return await this._contract.methods.isMinter(t).estimateGas()}async mint(t,e){o.a.isString("account",t),o.a.isNumberOrBigNumber("amount",e);const n=this._contract.methods.mint(t,e);return await n.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async mintGas(t,e){return await this._contract.methods.mint(t,e).estimateGas()}async name(){const t=this._contract.methods.name();return await t.call()}async nameGas(){return await this._contract.methods.name().estimateGas()}async removeMinter(t){o.a.isString("account",t);const e=this._contract.methods.removeMinter(t);return await e.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async removeMinterGas(t){return await this._contract.methods.removeMinter(t).estimateGas()}async renounceMinter(){const t=this._contract.methods.renounceMinter();return await t.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async renounceMinterGas(){return await this._contract.methods.renounceMinter().estimateGas()}async symbol(){const t=this._contract.methods.symbol();return await t.call()}async symbolGas(){return await this._contract.methods.symbol().estimateGas()}async tokenName(){const t=this._contract.methods.tokenName();return await t.call()}async tokenNameGas(){return await this._contract.methods.tokenName().estimateGas()}async tokenSymbol(){const t=this._contract.methods.tokenSymbol();return await t.call()}async tokenSymbolGas(){return await this._contract.methods.tokenSymbol().estimateGas()}async totalSupply(){const t=this._contract.methods.totalSupply();return await t.call()}async totalSupplyGas(){return await this._contract.methods.totalSupply().estimateGas()}async transfer(t,e){o.a.isString("recipient",t),o.a.isNumberOrBigNumber("amount",e);const n=this._contract.methods.transfer(t,e);return await n.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async transferGas(t,e){return await this._contract.methods.transfer(t,e).estimateGas()}async transferFrom(t,e,n){o.a.isString("sender",t),o.a.isString("recipient",e),o.a.isNumberOrBigNumber("amount",n);const r=this._contract.methods.transferFrom(t,e,n);return await r.send({from:this._blockwrap.getAccountAddress(),gas:this.gas,gasPrice:this.gasPrice}).on("transactionHash",(t=>{this.onBroadcast(t)})).on("confirmation",((t,e)=>{this.onConfirmation(e)})).on("receipt",(t=>{this.pushReceiptSuccess(t)})).on("error",((t,e)=>{this.onError(e,t)})).catch((t=>{this.catchErro(t)}))}async transferFromGas(t,e,n){return await this._contract.methods.transferFrom(t,e,n).estimateGas()}}h.contractName="Ori20"}}]);