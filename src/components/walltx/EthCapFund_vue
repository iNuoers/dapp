<template>
  <div class="ugrid clearfix">
    <div class="playfield">

      <div class="bet-row" v-if="!_disabled">
        <div class="invitecodebx half">
          <span class="h2code">Invite Code: <span :class="passed_check_confirmed"> {{myuplinecode}}</span></span>
        </div>
        <div class="invitecodebx half">
          <input type="text" maxlength="6" v-model="local_upline_code" :disabled="_disabled"/>
        </div>
      </div>

      <div class="bet-row" v-if="_disabled">
        <div class="invitecodebx full">
          <span class="h2code">Invite Code: <span :class="passed_check_confirmed"> {{myuplinecode}}</span></span>
        </div>
      </div>

      <div class="bet-row">
        <div class="kpocwrpx dark">
          <div class="hkyx" :class="{active: level_hazard===btnList.BTN_1}"
               @click="setBetAmount(btnList.BTN_1)">{{btnList.BTN_1}} {{btnList.UNIT}}
          </div>
          <div class="hkyx" :class="{active: level_hazard===btnList.BTN_2}"
               @click="setBetAmount(btnList.BTN_2)">{{btnList.BTN_2}} {{btnList.UNIT}}
          </div>
          <div class="hkyx" :class="{active: level_hazard===btnList.BTN_3}"
               @click="setBetAmount(btnList.BTN_3)">{{btnList.BTN_3}} {{btnList.UNIT}}
          </div>
          <div class="hkyx" :class="{active: level_hazard===btnList.BTN_4}"
               @click="setBetAmount(btnList.BTN_4)">{{btnList.BTN_4}} {{btnList.UNIT}}
          </div>
        </div>
      </div>

      <div class="content-playfield">
        <div class="boxout" :class="{disabled: cooldown>0 || this.status_ms !== 4}">
          <span class="cooldown" :style="{width: cooldown + '%'}"></span>
          <button @click="cdown">{{$t("bnt_bet")}}</button>
        </div>
      </div>
    </div>
    <div class="principle_x">
      <span style="font-size: 5px">{{$t("bnt_prin")}}:</span>
      <span style="font-size: 9px; color: greenyellow;">{{principalAmount}}ETH</span></div>
  </div>
</template>
<script>
  import { TimelineLite, Back, Power2, Power1 } from "gsap"
  import StringFilter from "../../plugins/tools/string_tx"
  import ethbasic from "../../plugins/tools/walletweb3"
  import sndbase from "../../plugins/mixins/capital/audiobase"
  import sndmine from "../../plugins/mixins/capital/cap"

  const R_pattern = new RegExp ("[`~!@+#$^&*()=|{}':;',\\[\\].<>《》/?~！@#￥……&*（）——|{}【】‘；：”“'。，、？]");
  const error_21 = "Non-standard invitation code";

  function invalidInviteCode (input) {
    return R_pattern.test (input) || input.length !== 6;
  }

  const ch_list_vals = {
    UNIT : "ETH",
    BTN_1 : 1,
    BTN_2 : 6,
    BTN_3 : 11,
    BTN_4 : 15,
  };

  export default {
    mixins : [sndbase, sndmine, StringFilter, ethbasic],
    name : "ethcap-fund-card",
    computed : {
      _disabled () {
        let result = !this.$store.getters ["masonic/isNewAccount"];
        if (result) {
          this.local_upline_code = "";
        }
        return result;
      },
      principalAmount () {
        return this.$store.getters ["masonic/principalAmount"];
      },
      change_bet () {
        return this.status_ms !== 4
      },
      myinvitationcode () {
        return this.$store.getters ["masonic/mycode"];
      },
      myuplinecode () {
        return this.$store.getters ["masonic/upline"];
      },
    },
    watch : {
      level_hazard (ol, ne) {
        this.betadjust ();
      },
      bet_amount (o, n) {
        this.betadjust ();
      },
      local_upline_code (o, n) {
        if (o.length === 6) {
          this.$emit ("checkInViteCode", o);
          this.$store.dispatch ("masonic/gen_upline", o);
        } else {
          if (this.$store.getters ["masonic/isNewAccount"]) {
            this.ThisCodeIs (false);
          } else {
            this.ThisCodeIs (true);
          }
        }
      }
    },
    methods : {
      setBetAmount (n) {
        const that = this;
        if (that.status_ms === 4) {
          that.level_hazard = n;
          that.bet_amount = n;
        }
      },
      cdown () {
        const that = this;
        if (that.cooldown === 0) {
          if (this.status_ms === 2) {
            //alert, success, error, warning, info
            that.notyError ("Game is now in play");
            //console.log ("status_ms block");
            return
          }
          if (that.bet_amount < 1) {
            that.notyError ("Cannot lower than min");
            that.input_class = "wrong";
            return
          } else {
            that.input_class = ""
          }
          if (!that.passedChecks) {
            that.notyError (that.$t("n_inv"));
            return
          }
          if (that.coin_symbol === "---") {
            that.notyError ("Coin name is invalid");
            return
          }
          if (!this._disabled && invalidInviteCode (that.local_upline_code)) {
            that.notyError (that.$t("n_upline"));
            return
          }
          that.cooldown = 100;
          that.$GSLite.to (that, 3, { cooldown : 0 });
          that.status_ms = 1;
          that.$GSLite.eventCallback ("onComplete", that.cdownComplete);
        }
      },
      cdownComplete () {
        let code = this.local_upline_code;
        if (this._disabled) {
          code = this.myuplinecode;
        }
        //when all checkers are completed
        this.$emit ("invest_submission", {
          amount : parseFloat (this.bet_amount),
          currency : this.coin_symbol,
          invite_code : code,
          time : new Date ()
        });
      },
      updatePayout (payrate, up) {
        const that = this, lite_animation = new TimelineLite ();
        // if (that.payout_rate_current < that.payout_rate) {
        lite_animation.to (that, 1.5, { payout_rate_current : payrate });
        if (up) {
          lite_animation.eventCallback ("onUpdate", that.sfxPoint);
        }
        //}
      },
      //failed to bet
      //restart to the bet
      setStatusReleased () {
        this.status_ms = 4;
        this.input_class = "";
      },
      setStatusConfirmStart () {
        this.notySuccess ("Game is now Ready!");
        this.status_ms = 2;
        this.input_class = "disabled";
      },
      ThisCodeIs (co) {
        this.passedChecks = co;
        this.passed_check_confirmed = co ? "passedcheck" : "failedcheck";
      }
    },
    mounted () {
      const timeline = new TimelineLite ();
      const that = this;
      that.$GSLite = timeline;
      const getters = this.$store.getters;
      this.$nextTick (() => {
        this.status_ms = 4;
        const newacc = getters ["masonic/isNewAccount"];
        if (newacc) {
          this.invite_code = getters["masonic/upline"];
          this.$emit ("checkInViteCode", this.local_upline_code);
        } else {
          this.ThisCodeIs (true);
        }
      });
      /* this.$store.subscribe ((mutations, state) => {
        const { finalpayout } = state.mines.round_game;
        if (finalpayout !== this.payout_rate_current) {
          console.log ("update payout success");
          this.updatePayout (finalpayout, finalpayout > this.payout_rate_current);
        }
      })*/
    },
    data () {
      return {
        local_upline_code : "00FD53",
        input_class : "",
        status_ms : 4,
        bet_amount : 0,
        cooldown : 0,
        passedChecks : false,
        passed_check_confirmed : "failedcheck",
        payout_rate_current : 0,
        level_hazard : 0,
        btnList : ch_list_vals,
      }
    }
  }
</script>
<style scoped lang="scss">
  @import "~assets/styles/core/utilities/coloru";
  @import "~assets/styles/core/utilities/fun";
  @import "~assets/styles/core/_bootstrap-variables";
  @import "~assets/styles/core/_animate";

  $colorUpa: #fa9300;
  $colorDowna: #fa6a00;
  $shadowInput: rgba(11, 11, 17, 0.53);
  $shadowInputFrame: #ab1104;
  $colorUp: #7bfa94;
  $colorDown: #28973a;
  $colorDownC: #134417;
  $colorUnderLine: #3cff43;
  $colorFg: #07cd02;

  .desktop-layout {
    display: -webkit-flex;
    justify-content: center;
    align-items: center;
    align-content: center;
  }

  .principle_x {
    bottom: 10px;
    right: 0px;
    line-height: 20px;
    position: absolute;
    overflow: hidden;
    display: block;
    padding: 5px;
    background-color: $colorDownC;
  }

  .rate_row {
    color: $colorFg;
  }

  .ratex {
    font-family: "Starworld";
  }

  @media(min-width: 510px) {

    .ticker_display {
      font-size: 2em;
      &.count_down_bet {
        font-size: 1.512em;
      }
    }
    .new_balance {
      display: block;
      margin-left: 40px !important;
    }
  }

  @media(max-width: 510px) {
    .ticker_display {
      font-size: 1.1em;
      &.count_down_bet {
        font-size: 0.982em;
      }
    }
  }

  .playfield {
    display: -webkit-flex;
    justify-content: center;
    align-items: center;
    align-content: center;
    flex-flow: column;
  }

  .h2code {
    text-shadow: #1d1d1d -0.7px 1.7px 0.83em;
    color: #a3cffa;
    font-weight: bold;
    .passedcheck {
      color: $colorUnderLine;
      text-shadow: $colorDown -0.7px 1.7px 0.83em;
    }
    .failedcheck {
      color: $shadowInputFrame;
    }
  }

  .invitecodebx {
    display: inline-flex;
    font-size: 18px;
    &.half {
      width: 50%;
    }
    &.full {
      width: 100%;
    }

    input[type=number], select[type=number], textarea[type=number] {
      padding-right: 0;
    }

    input {
      background-color: $shadowInput;
      border: 1px solid $colorUp;
      padding: 0 5px;
      line-height: 46px;
      height: 46px;
      color: #fff;
      font-size: 20px;
      text-align: center;
      width: 100%;
      font-family: "Quicksand", "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      &.wrong {
        border-color: #ff0200 !important;
      }
      box-shadow: 0 0 1em 0.25em rgba(0, 0, 0, .2);
    }
  }

  .btn, button {
    -webkit-appearance: none;
    -moz-appearance: none;
    border: 0;
    -webkit-transition: all .4s ease;
    -moz-transition: all .4s ease;
    -o-transition: all .4s ease;
    transition: all .4s ease;
    display: inline-block;
    cursor: pointer
  }

  .bet-row {
    @include noselect;
    user-select: none;
    border-left: 0;
    border-right: 0;
    flex-shrink: 0;
    padding: 0px;
    height: 70px;
    width: 100%;
    display: flex;
    align-items: center;
    align-content: center;
    color: white;

    .kpocwrpx {
      &.dark {
        background-color: $shadowInput;
      }
      display: flex;
      display: -webkit-flex;
      width: 100%;
      padding: 0 5px;
      .h2 {
        display: block;
        align-items: center;
      }
      .hkyx {
        cursor: pointer;
        font-size: 1.1em;
        line-height: 35px;
        padding-left: 5px;
        padding-right: 5px;
        border-bottom: 1px solid transparent;
        &.active {
          border-color: $colorUnderLine;
        }
      }

    }
  }

  .boxout {
    box-shadow: 0 0 1em 0.25em rgb(224, 240, 235);
    margin: 20px 0;
    background: linear-gradient(-135deg, $colorUp 0%, $colorDown 100%);
    padding: 2px;
    display: block;
    position: relative;

    .cooldown {
      position: absolute;
      height: 2px;
      background: $colorUp;
      background: linear-gradient(-135deg, $colorUp 0%, $colorDown 100%);
      left: 0;
      bottom: 0;
      z-index: 2;
    }

    button, a {
      text-transform: uppercase;
      width: 100%;
      height: 100%;
      padding: 10px;
      background-color: #080808;
      font-size: 14px;
      font-weight: 700;
      display: flex;
      display: -webkit-flex;
      justify-content: center;
      align-items: center;
      align-content: center;
      transition: all .4s ease;
      text-decoration: none;
      color: $colorUp;
      :hover {
        background-color: transparent;
        color: #000
      }
      .active {
        filter: brightness(0)
      }
      &:before {
        content: "";
        width: 40px;
        height: 40px;
        z-index: 1;
        background: url("~assets/img/ethchw.png") no-repeat 0px 0px;
        background-size: cover;
      }
    }
    .icon {
      margin-right: 10px
    }
    &.disabled, :disabled, .stop {
      background: #1f1b1b;
      button {
        color: $colorDown;
      }
    }
    :hover {
      background-color: transparent;
      color: #000
    }
    &.active {
      //filter: brightness(0)
      background: linear-gradient(-135deg, rgba(159, 158, 160, 0.71) 0%, #212328 100%);
    }
    &.done {
      opacity: .3;
      background: #4ec400
    }
  }

  .balance-wrapper {
    position: relative;
    p {
      font-size: 24px;
      font-weight: 300;
      margin: 0 10px;
      line-height: 20px;

      .symbol-coins {
        color: white;
        &:before {
          width: 1.1em;
          height: 1.1em;
          display: inline-block;
          vertical-align: middle;
          background-size: cover;
          background-image: url("~assets/img/coin_default.png");
          //      background-repeat: no-repeat;
          margin: 0 2px;
          position: relative;
          content: "";
        }
      }
    }

    .new_balance {
      color: $colorUp;
      font-size: 12px;
      line-height: 12px;
      position: absolute;
    }
  }

  .content-playfield {
    margin-top: 20px;
  }

</style>
